# fix wrong min_size algo for expert_recipe
d-i preseed/early_command string \
	echo "[local] downloading portman-auto "min_size" patch."; \
	wget -q -O /dev/stdout http://mirror.citiviz.vpn/seeds/files/kubuntu-11.10_partman-lvm-fix.tar | tar x && \
	echo "[local] patched." || \
	(echo "[local] couldn't download patch. Check your VPN connection!" && false)

d-i netcfg/get_hostname string dev-vm
d-i netcfg/get_hostname seen true
d-i netcfg/get_domain string test.citiviz.vpn

d-i debian-installer/locale string fr_CH.UTF-8
d-i console-setup/ask_detect boolean false
d-i keyboard-configuration/layoutcode string ch
d-i keyboard-configuration/variantcode string fr

d-i netcfg/choose_interface select auto
d-i netcfg/get_domain string citiviz.vpn
d-i netcfg/wireless_wep string

d-i mirror/protocol string http
d-i mirror/http/hostname string mirror.switch.ch
d-i mirror/http/directory string /ftp/mirror/ubuntu
d-i mirror/http/proxy string http://mirror.citiviz.vpn:3142/
d-i mirror/suite string oneiric
d-i clock-setup/utc boolean true
d-i time/zone string Europe/Zurich
d-i clock-setup/ntp-server string swisstime.ethz.ch

d-i partman-auto/purge_lvm_from_device boolean true
d-i partman-auto/disk string /dev/sda
d-i partman-auto/method string lvm
d-i partman-md/device_remove_md boolean true
d-i partman-md/confirm_nochanges boolean true
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-auto-lvm/guided_size string 100%
d-i partman-auto/expert_recipe string            \
    lvmcluster ::                                \
        200 1 200 ext3                           \
            $primary{ } $bootable{ }             \
            method{ format } format{ }           \
            use_filesystem{ } filesystem{ ext3 } \
            mountpoint{ /boot }                  \
            label{ boot }                        \
        .                                        \
        24576 1 max lvm                          \
            $primary{ }                          \
            method{ lvm }                        \
            vg_name{ vg_main }                   \
        .                                        \
        10240 1 20480 xfs                    	 \
	    $defaultignore{ }			 \
            $lvmok{ }                            \
            lv_name{ root }                      \
	    in_vg{ vg_main }			 \
            method{ format } format{ }           \
            use_filesystem{ } filesystem{ xfs }  \
            mountpoint{ / }                      \
            label{ root }                        \
        .                                        \
        5120 3 32768 xfs          	  	 \
	    $defaultignore{ }			 \
            $lvmok{ }                            \
            lv_name{ home }                      \
	    in_vg{ vg_main }			 \
            method{ format } format{ }           \
            use_filesystem{ } filesystem{ xfs }  \
            mountpoint{ /home }                  \
            label{ home }                        \
        .                                        \
        5120 4 max ext4 		 	 \
	    $defaultignore{ }			 \
            $lvmok{ }                            \
            lv_name{ var }                       \
	    in_vg{ vg_main }			 \
            method{ format } format{ }          \
            use_filesystem{ } filesystem{ ext4 } \
            mountpoint{ /var }                   \
            label{ var }                         \
        .					 \
        4096 2 4096 linux-swap                   \
	    $defaultignore{ }			 \
            $lvmok{ }                            \
            lv_name{ swap }                      \
	    in_vg{ vg_main }			 \
            method{ swap } format{ }             \
        .
d-i partman-auto/choose_recipe select lvmcluster
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select Finish partitioning and write changes to disk
d-i partman-lvm/confirm boolean true
d-i partman/confirm boolean true
d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman/confirm_nooverwrite boolean true
d-i partman/mount_style select label

d-i base-installer/kernel/image string linux-virtual

d-i passwd/root-login boolean true
d-i passwd/root-password-crypted password $1$qkmGNs6O$/Uhd9zB0OZtveO8w1Szs6/
d-i passwd/make-user boolean true
d-i passwd/user-fullname string DevVM Test User
#d-i passwd/user-uid string 1000
d-i passwd/username string citiviz
d-i passwd/user-password password citiviz
d-i passwd/user-password-again password citiviz
#d-i passwd/user-password-crypted password {{PASSWORD_MD5}}
d-i user-setup/allow-password-weak boolean true
d-i passwd/user-default-groups string \
    audio \
    cdrom \
    video \
    adm \
    dialout \
    plugdev \
    lpadmin \
    admin \
    sambashare
d-i user-setup/encrypt-home boolean true

d-i apt-setup/restricted boolean true
d-i apt-setup/universe boolean true
d-i apt-setup/backports boolean true
d-i apt-setup/use_mirror boolean true
d-i apt-setup/services-select multiselect security
d-i apt-setup/security_host string security.ubuntu.com
d-i apt-setup/security_path string /ubuntu
d-i apt-setup/local0/comment string \
    "Citiviz Debian/Ubuntu Mirror - http://mirror.citiviz.vpn/repo/ubuntu"
d-i apt-setup/local0/repository string \
    http://mirror.citiviz.vpn/repo/ubuntu oneiric main
d-i apt-setup/local0/source boolean false
d-i apt-setup/local0/key string \
    http://mirror.citiviz.vpn/repo/root@mirror.citiviz.vpn.gpg

d-i debian-installer/allow_unauthenticated string false
tasksel tasksel/first multiselect kubuntu-desktop

d-i pkgsel/upgrade select safe-upgrade
d-i pkgsel/language-packs multiselect en
d-i pkgsel/update-policy select unattended-upgrades
d-i pkgsel/include string

#popularity-contest popularity-contest/participate boolean false
d-i pkgsel/updatedb boolean false
d-i grub-installer/skip boolean false
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
#d-i grub-installer/password password r00tme
#d-i grub-installer/password-again password r00tme
#d-i grub-installer/password-crypted password [MD5 hash]

#d-i finish-install/keep-consoles boolean true
d-i finish-install/reboot_in_progress note
#d-i cdrom-detect/eject boolean false
#d-i debian-installer/exit/halt boolean true
#d-i debian-installer/exit/poweroff boolean true

#xserver-xorg xserver-xorg/config/device/driver select vesa
#xserver-xorg xserver-xorg/autodetect_mouse boolean true
xserver-xorg xserver-xorg/autodetect_monitor boolean true
#xserver-xorg xserver-xorg/config/monitor/lcd boolean true
xserver-xorg xserver-xorg/config/monitor/selection-method \
       select medium
xserver-xorg xserver-xorg/config/monitor/mode-list \
       select 1024x768 @ 60 Hz

### Preseeding other packages
# Depending on what software you choose to install, or if things go wrong
# during the installation process, it's possible that other questions may
# be asked. You can preseed those too, of course. To get a list of every
# possible question that could be asked during an install, do an
# installation, and then run these commands:
#   debconf-get-selections --installer > file
#   debconf-get-selections >> file

#### Advanced options
### Running custom commands during the installation
# d-i preseeding is inherently not secure. Nothing in the installer checks
# for attempts at buffer overflows or other exploits of the values of a
# preconfiguration file like this one. Only use preconfiguration files from
# trusted locations! To drive that home, and because it's generally useful,
# here's a way to run any shell command you'd like inside the installer,
# automatically.

# This first command is run as early as possible, just after
# preseeding is read.
#d-i preseed/early_command string anna-install some-udeb

# This command is run immediately before the partitioner starts. It may be
# useful to apply dynamic partitioner preseeding that depends on the state
# of the disks (which may not be visible when preseed/early_command runs).
#d-i partman/early_command string debconf-set partman-auto/disk "$(list-devices disk | head -n1)"

# This command is run just before the install finishes, but when there is
# still a usable /target directory. You can chroot to /target and use it
# directly, or use the apt-install and in-target commands to easily install
# packages and run commands in the target system.
#d-i preseed/late_command string apt-install zsh; in-target chsh -s /bin/zsh


d-i preseed/late_command string \
    echo "entering /target/root";                                           \
    mkdir -p /target/root;                                                  \
    cd /target/root/;                                                       \
    echo "fetching packages.list.";                                         \
    wget http://mirror.citiviz.vpn/seeds/files/dev-vm/packages.list; || (   \
        echo "Failed to download packages.list. Please do it manually.";    \
        sh;                                                                 \
        echo "packages.list assumed to be here".                            \
    );                                                                      \
    echo "installing extra packages.";                                      \
    apt-install $(cat packages.list | tr '\n' ' ') || (                     \
        echo "Failed to install packages. Please fix it and try again.";    \
        sh;                                                                 \
        echo "Now going to post-install...";                                \
    );                                                                      \
    echo "fetching post-install.sh script.";                                \
    wget http://mirror.citiviz.vpn/seeds/files/dev-vm/post-install.sh || (  \
        echo "Failed to fetch post-install.sh. Please do it manually.";     \
        sh;                                                                 \
        echo "Now going to execute post-install.sh.";                       \
    );                                                                      \
    chmod +x /target/root/post-install.sh || (                              \
        echo "Can't chmod +x post-install.sh":                              \
        sh;                                                                 \
        echo "Executing post-install.sh.";                                  \
    );                                                                      \
    echo "executing post-install.sh script.";                               \
    in-target /root/post-install.sh || (                                    \
        echo "in-target post-install.sh execution failed.";                 \
        sh;                                                                 \
    );                                                                      \
    echo "late_command END";
    
